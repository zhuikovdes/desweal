---
alwaysApply: true
---

# Development Practice & Learning Guidelines

## Learning Approach

### Instead of Writing Code for You, I Will:
1. **Guide you through concepts** - Explain how things work
2. **Provide practice tasks** - Give you challenges to solve
3. **Review your code** - Help you improve what you write
4. **Suggest improvements** - Point out better approaches
5. **Answer questions** - Help you understand concepts

### How to Practice Effectively:
1. **Start with small tasks** - Build confidence gradually
2. **Write code yourself** - Don't copy-paste, type it out
3. **Experiment and fail** - Learn from mistakes
4. **Ask specific questions** - "How do I implement X?" not "Write X for me"
5. **Review and refactor** - Improve your code iteratively

## Practice Tasks for DESWEAL

### Task 1: Create Validation Mixin
**Challenge**: Create a reusable validation mixin for forms.

**Requirements**:
- Create `ValidationMixin` with `isValid` getter
- Add `validationError` getter that returns error message
- Implement in `TransactionForm` and `GoalForm`
- Handle different validation rules

**Questions to ask yourself**:
- How can I make this mixin reusable?
- What validation rules do I need?
- How do I handle multiple validation errors?

### Task 2: Extend DateTime for Financial Calculations
**Challenge**: Create extension methods for DateTime useful in finance apps.

**Requirements**:
- `isInCurrentMonth` and `isInCurrentYear` getters
- `getDaysInMonth` getter
- `isWeekend` getter
- `addBusinessDays(int days)` method
- `getFiscalYear()` method

**Questions to ask yourself**:
- What financial date calculations are common?
- How do I handle edge cases (leap years, etc.)?
- What's the difference between calendar and fiscal year?

### Task 3: Build Generic Repository
**Challenge**: Create a type-safe generic repository system.

**Requirements**:
- Generic `Repository<T>` class
- Methods: `getAll()`, `getById(String id)`, `save(T item)`, `delete(String id)`
- Create `TransactionRepository` and `GoalRepository`
- Add type-specific methods to each

**Questions to ask yourself**:
- How do generics help with type safety?
- What common operations do all repositories need?
- How do I add specific functionality to generic classes?

### Task 4: Create Generic Widget Builder
**Challenge**: Build a reusable widget for displaying lists.

**Requirements**:
- Generic `ListViewBuilder<T>` widget
- Accept `itemBuilder` function
- Accept `onItemTap` callback
- Use for transactions, goals, and insights

**Questions to ask yourself**:
- How do I pass functions as parameters?
- What's the difference between `Widget Function(T)` and `Widget Function(BuildContext, T)`?
- How do I handle empty states?

### Task 5: State Management with Mixins
**Challenge**: Create mixins for common state management patterns.

**Requirements**:
- `LoadingMixin` with loading state
- `ErrorMixin` with error handling
- `RefreshMixin` with refresh functionality
- Combine them in a Bloc or Cubit

**Questions to ask yourself**:
- How do mixins share state?
- What's the difference between mixins and inheritance?
- How do I avoid conflicts between mixins?

## Interview Practice Questions

### Mixins
1. **What is a mixin and when would you use it?**
   - Think about: Reusable functionality, multiple inheritance
   - Practice: Create a simple mixin for logging

2. **How do mixins differ from inheritance?**
   - Think about: "is-a" vs "has-a" relationships
   - Practice: Compare inheritance vs mixin for the same functionality

3. **What are the limitations of mixins?**
   - Think about: Constructors, private members, order
   - Practice: Try to break a mixin and see what happens

### Extensions
1. **What are extension methods and why use them?**
   - Think about: Adding functionality without modifying original
   - Practice: Extend String with financial formatting methods

2. **Can you create extensions for any type?**
   - Think about: Built-in types, custom classes, generics
   - Practice: Create extensions for DateTime, List, and your own classes

3. **What are the benefits of extensions over utility classes?**
   - Think about: Syntax, IDE support, private access
   - Practice: Convert a utility class to extensions

### Generics
1. **What are generics and why use them?**
   - Think about: Type safety, code reuse
   - Practice: Create a generic cache class

2. **What are generic constraints?**
   - Think about: Limiting types, ensuring capabilities
   - Practice: Create a generic repository with constraints

3. **How do you create generic methods?**
   - Think about: Type parameters, constraints, multiple types
   - Practice: Create generic utility methods

## Code Review Checklist

When reviewing your own code, ask:

### Architecture
- [ ] Does this follow SOLID principles?
- [ ] Is the responsibility clear and single?
- [ ] Are dependencies properly inverted?
- [ ] Is the code testable?

### Dart Best Practices
- [ ] Are you using null safety properly?
- [ ] Are const constructors used where possible?
- [ ] Are extension methods used appropriately?
- [ ] Is the code readable and maintainable?

### Performance
- [ ] Are you using const widgets?
- [ ] Are lists optimized (ListView.builder)?
- [ ] Are expensive operations async?
- [ ] Is memory usage efficient?

### Testing
- [ ] Can this code be unit tested?
- [ ] Are edge cases handled?
- [ ] Is error handling comprehensive?
- [ ] Are tests meaningful and specific?

## Learning Resources

### For Mixins:
- Dart documentation on mixins
- Real-world examples in Flutter framework
- Practice with simple examples first

### For Extensions:
- Dart documentation on extensions
- Look at how Flutter uses extensions
- Practice extending built-in types

### For Generics:
- Dart documentation on generics
- Study Flutter's generic widgets
- Practice with collections and repositories

## Next Steps

1. **Start with Task 1** - Validation Mixin
2. **Ask specific questions** when you get stuck
3. **Share your code** for review and feedback
4. **Iterate and improve** based on feedback
5. **Move to next task** when current one is solid

Remember: The goal is to help you grow as a developer, not to write code for you!
# Development Practice & Learning Guidelines

## Learning Approach

### Instead of Writing Code for You, I Will:
1. **Guide you through concepts** - Explain how things work
2. **Provide practice tasks** - Give you challenges to solve
3. **Review your code** - Help you improve what you write
4. **Suggest improvements** - Point out better approaches
5. **Answer questions** - Help you understand concepts

### How to Practice Effectively:
1. **Start with small tasks** - Build confidence gradually
2. **Write code yourself** - Don't copy-paste, type it out
3. **Experiment and fail** - Learn from mistakes
4. **Ask specific questions** - "How do I implement X?" not "Write X for me"
5. **Review and refactor** - Improve your code iteratively

## Practice Tasks for DESWEAL

### Task 1: Create Validation Mixin
**Challenge**: Create a reusable validation mixin for forms.

**Requirements**:
- Create `ValidationMixin` with `isValid` getter
- Add `validationError` getter that returns error message
- Implement in `TransactionForm` and `GoalForm`
- Handle different validation rules

**Questions to ask yourself**:
- How can I make this mixin reusable?
- What validation rules do I need?
- How do I handle multiple validation errors?

### Task 2: Extend DateTime for Financial Calculations
**Challenge**: Create extension methods for DateTime useful in finance apps.

**Requirements**:
- `isInCurrentMonth` and `isInCurrentYear` getters
- `getDaysInMonth` getter
- `isWeekend` getter
- `addBusinessDays(int days)` method
- `getFiscalYear()` method

**Questions to ask yourself**:
- What financial date calculations are common?
- How do I handle edge cases (leap years, etc.)?
- What's the difference between calendar and fiscal year?

### Task 3: Build Generic Repository
**Challenge**: Create a type-safe generic repository system.

**Requirements**:
- Generic `Repository<T>` class
- Methods: `getAll()`, `getById(String id)`, `save(T item)`, `delete(String id)`
- Create `TransactionRepository` and `GoalRepository`
- Add type-specific methods to each

**Questions to ask yourself**:
- How do generics help with type safety?
- What common operations do all repositories need?
- How do I add specific functionality to generic classes?

### Task 4: Create Generic Widget Builder
**Challenge**: Build a reusable widget for displaying lists.

**Requirements**:
- Generic `ListViewBuilder<T>` widget
- Accept `itemBuilder` function
- Accept `onItemTap` callback
- Use for transactions, goals, and insights

**Questions to ask yourself**:
- How do I pass functions as parameters?
- What's the difference between `Widget Function(T)` and `Widget Function(BuildContext, T)`?
- How do I handle empty states?

### Task 5: State Management with Mixins
**Challenge**: Create mixins for common state management patterns.

**Requirements**:
- `LoadingMixin` with loading state
- `ErrorMixin` with error handling
- `RefreshMixin` with refresh functionality
- Combine them in a Bloc or Cubit

**Questions to ask yourself**:
- How do mixins share state?
- What's the difference between mixins and inheritance?
- How do I avoid conflicts between mixins?

## Interview Practice Questions

### Mixins
1. **What is a mixin and when would you use it?**
   - Think about: Reusable functionality, multiple inheritance
   - Practice: Create a simple mixin for logging

2. **How do mixins differ from inheritance?**
   - Think about: "is-a" vs "has-a" relationships
   - Practice: Compare inheritance vs mixin for the same functionality

3. **What are the limitations of mixins?**
   - Think about: Constructors, private members, order
   - Practice: Try to break a mixin and see what happens

### Extensions
1. **What are extension methods and why use them?**
   - Think about: Adding functionality without modifying original
   - Practice: Extend String with financial formatting methods

2. **Can you create extensions for any type?**
   - Think about: Built-in types, custom classes, generics
   - Practice: Create extensions for DateTime, List, and your own classes

3. **What are the benefits of extensions over utility classes?**
   - Think about: Syntax, IDE support, private access
   - Practice: Convert a utility class to extensions

### Generics
1. **What are generics and why use them?**
   - Think about: Type safety, code reuse
   - Practice: Create a generic cache class

2. **What are generic constraints?**
   - Think about: Limiting types, ensuring capabilities
   - Practice: Create a generic repository with constraints

3. **How do you create generic methods?**
   - Think about: Type parameters, constraints, multiple types
   - Practice: Create generic utility methods

## Code Review Checklist

When reviewing your own code, ask:

### Architecture
- [ ] Does this follow SOLID principles?
- [ ] Is the responsibility clear and single?
- [ ] Are dependencies properly inverted?
- [ ] Is the code testable?

### Dart Best Practices
- [ ] Are you using null safety properly?
- [ ] Are const constructors used where possible?
- [ ] Are extension methods used appropriately?
- [ ] Is the code readable and maintainable?

### Performance
- [ ] Are you using const widgets?
- [ ] Are lists optimized (ListView.builder)?
- [ ] Are expensive operations async?
- [ ] Is memory usage efficient?

### Testing
- [ ] Can this code be unit tested?
- [ ] Are edge cases handled?
- [ ] Is error handling comprehensive?
- [ ] Are tests meaningful and specific?

## Learning Resources

### For Mixins:
- Dart documentation on mixins
- Real-world examples in Flutter framework
- Practice with simple examples first

### For Extensions:
- Dart documentation on extensions
- Look at how Flutter uses extensions
- Practice extending built-in types

### For Generics:
- Dart documentation on generics
- Study Flutter's generic widgets
- Practice with collections and repositories

## Next Steps

1. **Start with Task 1** - Validation Mixin
2. **Ask specific questions** when you get stuck
3. **Share your code** for review and feedback
4. **Iterate and improve** based on feedback
5. **Move to next task** when current one is solid

Remember: The goal is to help you grow as a developer, not to write code for you!
