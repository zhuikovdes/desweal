---
alwaysApply: true
---

# Правила работы на Windows и общения на русском языке

## Системная информация
- **ОС**: Windows 10 (версия 10.0.26100)
- **Рабочая директория**: C:\__d_zh__\zhuikovdes\desweal
- **Shell**: PowerShell (C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe)
- **Язык общения**: Русский

## Правила для Windows

### Пути и файловая система
- Использовать обратные слеши `\` для путей Windows
- Учитывать ограничения Windows на имена файлов (максимум 255 символов)
- Избегать специальных символов в именах файлов: `<>:"/\|?*`
- Учитывать регистр файловой системы Windows (обычно нечувствительна к регистру)

### PowerShell команды
- Использовать PowerShell синтаксис вместо bash
- Команды разделять точкой с запятой `;` вместо `&&`
- Использовать `cd` для смены директории
- Использовать `dir` или `ls` для просмотра содержимого
- Использовать `mkdir` для создания папок
- Использовать `del` для удаления файлов
- Использовать `rmdir` для удаления папок

### Flutter/Dart на Windows
- Убедиться что Flutter установлен и добавлен в PATH
- Использовать `flutter doctor` для проверки окружения
- Использовать `flutter clean` для очистки проекта
- Использовать `flutter pub get` для установки зависимостей
- Использовать `flutter run` для запуска приложения

### Градиент и сборка
- Использовать `gradlew.bat` для Windows вместо `./gradlew`
- Учитывать особенности сборки Android на Windows
- Проверять переменные окружения JAVA_HOME и ANDROID_HOME
- Использовать Android Studio или VS Code для разработки

## Правила общения на русском

### Технические термины
- Использовать русские эквиваленты где возможно
- Сохранять английские термины для точности
- Объяснять сложные концепции на русском языке
- Использовать примеры кода с комментариями на русском

### Структура ответов
- Давать краткие и точные ответы
- Использовать технический стиль
- Предоставлять код сразу, без лишних объяснений
- Объяснять только если просят или если это критично

### Обращение
- Использовать "ты" для неформального общения
- Быть прямым и техничным
- Избегать лишних вежливостей
- Фокусироваться на решении проблемы

## Правила создания файлов

### Размер файлов
- Создавать файлы примерно на 200 строк
- Разбивать большие файлы на логические части
- Использовать модульную структуру
- Соблюдать принцип единственной ответственности

### Структура файлов
- Начинать с импортов
- Группировать код по функциональности
- Использовать комментарии для разделения секций
- Заканчивать экспортами или основными классами

### Именование файлов
- Использовать snake_case для имен файлов
- Добавлять суффиксы по типу: `_screen.dart`, `_widget.dart`, `_bloc.dart`
- Использовать описательные имена
- Избегать сокращений

## Специфичные для Windows проблемы

### Кодировки
- Использовать UTF-8 для всех файлов
- Учитывать кодировку консоли Windows (обычно CP1251)
- Использовать `chcp 65001` для переключения на UTF-8 в консоли

### Права доступа
- Учитывать права администратора для некоторых операций
- Использовать "Запуск от имени администратора" при необходимости
- Проверять права на запись в директории проекта

### Антивирусы
- Учитывать возможные блокировки антивирусом
- Добавлять исключения для папок разработки
- Проверять логи антивируса при проблемах

### Сетевые настройки
- Учитывать корпоративные прокси при необходимости
- Проверять настройки брандмауэра Windows
- Использовать VPN если требуется

## Инструменты разработки

### IDE и редакторы
- Android Studio для Android разработки
- VS Code для Flutter/Dart
- IntelliJ IDEA для Java/Kotlin
- Git Bash для работы с Git

### Отладка
- Использовать `print()` для простой отладки
- Использовать `debugPrint()` для Flutter
- Использовать точки останова в IDE
- Проверять логи в Android Studio

### Производительность
- Использовать SSD для быстрой работы
- Настроить достаточный объем RAM для IDE
- Использовать внешние мониторы для удобства
- Настроить горячие клавиши для продуктивности

## Безопасность

### Переменные окружения
- Не хранить секреты в коде
- Использовать .env файлы для конфигурации
- Добавлять .env в .gitignore
- Использовать Windows Credential Manager для паролей

### Git
- Настроить SSH ключи для безопасного доступа
- Использовать GPG подписи для коммитов
- Регулярно делать бэкапы проекта
- Использовать .gitignore для исключения ненужных файлов

## Рекомендации по производительности

### Система
- Использовать последние версии Flutter и Dart
- Регулярно обновлять зависимости
- Использовать кэширование для ускорения сборки
- Настроить автодополнение в IDE

### Код
- Использовать const конструкторы где возможно
- Оптимизировать rebuilds в Flutter
- Использовать ListView.builder для больших списков
- Избегать излишних вычислений в build методах

Эти правила помогут эффективно работать с Flutter/Dart проектами на Windows и обеспечат качественную коммуникацию на русском языке.

# Правила работы на Windows и общения на русском языке

## Системная информация
- **ОС**: Windows 10 (версия 10.0.26100)
- **Рабочая директория**: C:\__d_zh__\zhuikovdes\desweal
- **Shell**: PowerShell (C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe)
- **Язык общения**: Русский

## Правила для Windows

### Пути и файловая система
- Использовать обратные слеши `\` для путей Windows
- Учитывать ограничения Windows на имена файлов (максимум 255 символов)
- Избегать специальных символов в именах файлов: `<>:"/\|?*`
- Учитывать регистр файловой системы Windows (обычно нечувствительна к регистру)

### PowerShell команды
- Использовать PowerShell синтаксис вместо bash
- Команды разделять точкой с запятой `;` вместо `&&`
- Использовать `cd` для смены директории
- Использовать `dir` или `ls` для просмотра содержимого
- Использовать `mkdir` для создания папок
- Использовать `del` для удаления файлов
- Использовать `rmdir` для удаления папок

### Flutter/Dart на Windows
- Убедиться что Flutter установлен и добавлен в PATH
- Использовать `flutter doctor` для проверки окружения
- Использовать `flutter clean` для очистки проекта
- Использовать `flutter pub get` для установки зависимостей
- Использовать `flutter run` для запуска приложения

### Градиент и сборка
- Использовать `gradlew.bat` для Windows вместо `./gradlew`
- Учитывать особенности сборки Android на Windows
- Проверять переменные окружения JAVA_HOME и ANDROID_HOME
- Использовать Android Studio или VS Code для разработки

## Правила общения на русском

### Технические термины
- Использовать русские эквиваленты где возможно
- Сохранять английские термины для точности
- Объяснять сложные концепции на русском языке
- Использовать примеры кода с комментариями на русском

### Структура ответов
- Давать краткие и точные ответы
- Использовать технический стиль
- Предоставлять код сразу, без лишних объяснений
- Объяснять только если просят или если это критично

### Обращение
- Использовать "ты" для неформального общения
- Быть прямым и техничным
- Избегать лишних вежливостей
- Фокусироваться на решении проблемы

## Правила создания файлов

### Размер файлов
- Создавать файлы примерно на 200 строк
- Разбивать большие файлы на логические части
- Использовать модульную структуру
- Соблюдать принцип единственной ответственности

### Структура файлов
- Начинать с импортов
- Группировать код по функциональности
- Использовать комментарии для разделения секций
- Заканчивать экспортами или основными классами

### Именование файлов
- Использовать snake_case для имен файлов
- Добавлять суффиксы по типу: `_screen.dart`, `_widget.dart`, `_bloc.dart`
- Использовать описательные имена
- Избегать сокращений

## Специфичные для Windows проблемы

### Кодировки
- Использовать UTF-8 для всех файлов
- Учитывать кодировку консоли Windows (обычно CP1251)
- Использовать `chcp 65001` для переключения на UTF-8 в консоли

### Права доступа
- Учитывать права администратора для некоторых операций
- Использовать "Запуск от имени администратора" при необходимости
- Проверять права на запись в директории проекта

### Антивирусы
- Учитывать возможные блокировки антивирусом
- Добавлять исключения для папок разработки
- Проверять логи антивируса при проблемах

### Сетевые настройки
- Учитывать корпоративные прокси при необходимости
- Проверять настройки брандмауэра Windows
- Использовать VPN если требуется

## Инструменты разработки

### IDE и редакторы
- Android Studio для Android разработки
- VS Code для Flutter/Dart
- IntelliJ IDEA для Java/Kotlin
- Git Bash для работы с Git

### Отладка
- Использовать `print()` для простой отладки
- Использовать `debugPrint()` для Flutter
- Использовать точки останова в IDE
- Проверять логи в Android Studio

### Производительность
- Использовать SSD для быстрой работы
- Настроить достаточный объем RAM для IDE
- Использовать внешние мониторы для удобства
- Настроить горячие клавиши для продуктивности

## Безопасность

### Переменные окружения
- Не хранить секреты в коде
- Использовать .env файлы для конфигурации
- Добавлять .env в .gitignore
- Использовать Windows Credential Manager для паролей

### Git
- Настроить SSH ключи для безопасного доступа
- Использовать GPG подписи для коммитов
- Регулярно делать бэкапы проекта
- Использовать .gitignore для исключения ненужных файлов

## Рекомендации по производительности

### Система
- Использовать последние версии Flutter и Dart
- Регулярно обновлять зависимости
- Использовать кэширование для ускорения сборки
- Настроить автодополнение в IDE

### Код
- Использовать const конструкторы где возможно
- Оптимизировать rebuilds в Flutter
- Использовать ListView.builder для больших списков
- Избегать излишних вычислений в build методах

Эти правила помогут эффективно работать с Flutter/Dart проектами на Windows и обеспечат качественную коммуникацию на русском языке.

