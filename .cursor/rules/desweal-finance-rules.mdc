---
alwaysApply: true
---

# DESWEAL - Personal Finance App Development Rules

You are an expert in Flutter, Dart, Bloc, Freezed, Flutter Hooks, and Firebase, specializing in personal finance applications.

## Core App Philosophy
- **Simplicity First**: Every feature must be intuitive and require minimal cognitive load
- **Modern 2025 Design**: Glassmorphism, subtle gradients, micro-interactions, and dark mode preference
- **Financial Empowerment**: Focus on savings growth and smart income distribution
- **Minimalist but Sophisticated**: Clean interfaces with premium feel

## Key Principles
- Write concise, technical Dart code with accurate examples
- Use functional and declarative programming patterns where appropriate
- Prefer composition over inheritance
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported widget, subwidgets, helpers, static content, types
- Follow SOLID principles and Object-Oriented Programming best practices
- Use Dart language features effectively (null safety, extensions, const constructors)
- Implement proper error handling and validation
- Write testable and maintainable code

# Dart/Flutter Guidelines
- Use const constructors for immutable widgets
- Leverage Freezed for immutable state classes and unions
- Use arrow syntax for simple functions and methods
- Prefer expression bodies for one-line getters and setters
- Use trailing commas for better formatting and diffs

# UI and Styling - 2025 Modern Design

## Color Palette & Theming
- **Primary**: Deep blues and teals (#1E3A8A, #0F766E)
- **Secondary**: Soft purples and pinks (#8B5CF6, #EC4899)
- **Accent**: Gold/yellow for financial success (#F59E0B, #EAB308)
- **Background**: Dark theme as primary with glassmorphism effects
- **Text**: High contrast whites and light grays for readability
- **Gradient Lines**: Subtle gradient lines for visual separation and premium feel

## Design Patterns
- **Glassmorphism**: Use backdrop filters and subtle transparency
- **Micro-interactions**: Smooth animations for state changes (200-300ms)
- **Neumorphism**: Subtle shadows for depth without heavy effects
- **Gradient Overlays**: Soft gradients for premium feel
- **Gradient Lines**: Thin gradient lines (1-2px) for visual separation between sections
- **Rounded Corners**: 12-16px radius for modern look
- **Spacing**: 8px grid system (8, 16, 24, 32, 48px)

## Typography
- **Headings**: Inter or SF Pro Display, bold weights
- **Body**: Inter or SF Pro Text, regular weights
- **Numbers**: Monospace font for financial data (JetBrains Mono)
- **Hierarchy**: Clear size progression (24px, 20px, 16px, 14px, 12px)

# Financial Features & Income Distribution

## Income Distribution Schemes
- **50/30/20 Rule**: 50% needs, 30% wants, 20% savings
- **60/20/20 Rule**: 60% needs, 20% wants, 20% savings
- **70/20/10 Rule**: 70% needs, 20% savings, 10% wants
- **Custom Allocation**: User-defined percentages
- **Envelope System**: Digital envelope budgeting
- **Zero-Based Budgeting**: Every dollar assigned a purpose

## Core Financial Components
- **Income Tracking**: Multiple income sources with categorization
- **Expense Categorization**: Smart auto-categorization with ML
- **Savings Goals**: Visual progress tracking with milestones
- **Investment Tracking**: Simple portfolio overview
- **Debt Management**: Payment tracking and payoff strategies
- **Financial Insights**: AI-powered spending analysis

## Data Models
```dart
// Income Distribution Scheme
enum DistributionScheme {
  fiftyThirtyTwenty,
  sixtyTwentyTwenty,
  seventyTwentyTen,
  custom,
  envelope,
  zeroBased,
}

// Financial Categories
enum CategoryType {
  income,
  expense,
  savings,
  investment,
  debt,
}

// Transaction Model
class Transaction {
  final String id;
  final double amount;
  final CategoryType category;
  final String description;
  final DateTime date;
  final String? attachmentUrl;
  final bool isRecurring;
}
```

# UI Components & Widgets

## Financial Cards
- **Income Card**: Large, prominent display with distribution breakdown
- **Expense Card**: Categorized spending with visual indicators
- **Savings Card**: Progress rings and goal visualization
- **Investment Card**: Portfolio overview with performance metrics

## Interactive Elements
- **Circular Progress**: For savings goals and budget tracking
- **Animated Charts**: Smooth transitions for financial data
- **Swipe Actions**: Quick actions on transaction items
- **Pull-to-Refresh**: With satisfying haptic feedback
- **Bottom Sheets**: For detailed views and actions

## Navigation
- **Bottom Navigation**: 4-5 main sections (Dashboard, Transactions, Goals, Insights, Profile)
- **Floating Action Button**: Quick add transaction
- **Tab Navigation**: For sub-sections within main areas
- **Deep Linking**: Direct links to specific financial views

# State Management for Finance

## Financial State Structure
```dart
class FinanceState {
  final List<Transaction> transactions;
  final List<SavingsGoal> goals;
  final DistributionScheme activeScheme;
  final Map<CategoryType, double> monthlyTotals;
  final bool isLoading;
  final String? error;
}
```

## Key Actions
- **Add Transaction**: Quick entry with smart categorization
- **Update Distribution**: Modify income allocation scheme
- **Set Goals**: Create and track savings targets
- **Generate Insights**: AI-powered financial analysis
- **Export Data**: PDF reports and CSV exports

# Bloc/Cubit Guidelines
- Use Cubit for managing simple state and Bloc for complex event-driven state management
- Extend states with Freezed for immutability
- Use descriptive and meaningful event names for Bloc
- Handle state transitions and side effects in Bloc's mapEventToState
- Prefer context.read() or context.watch() for accessing Cubit/Bloc states in widgets

# Firebase Integration
- Use Firebase Authentication for user sign-in, sign-up, and password management
- Integrate Firestore for real-time database interactions with structured and normalized data
- Implement Firebase Storage for file uploads and downloads with proper error handling
- Use Firebase Analytics for tracking user behavior and app performance
- Handle Firebase exceptions with detailed error messages and appropriate logging
- Secure database rules in Firestore and Storage based on user roles and permissions

# Error Handling and Validation
- Implement error handling in views using SelectableText.rich instead of SnackBars
- Display errors in SelectableText.rich with red color for visibility
- Handle empty states within the displaying screen
- Manage error handling and loading states within Cubit states

# Performance Optimization
- Use const widgets where possible to optimize rebuilds
- Implement list view optimizations (e.g., ListView.builder)
- Use AssetImage for static images and cached_network_image for remote images
- Optimize Firebase queries by using indexes and limiting query results

# Key Conventions
1. Use GoRouter or auto_route for navigation and deep linking
2. Optimize for Flutter performance metrics (first meaningful paint, time to interactive)
3. Prefer stateless widgets:
   - Use BlocBuilder for widgets that depend on Cubit/Bloc state
   - Use BlocListener for handling side effects, such as navigation or showing dialogs
4. File naming conventions:
   - **Screens**: Always use `_screen.dart` suffix (e.g., `home_screen.dart`, `add_transaction_screen.dart`)
   - **Widgets**: Use descriptive names without suffix (e.g., `transaction_list.dart`, `balance_summary.dart`)
   - **Layouts**: Use `_layout.dart` suffix for layout components (e.g., `main_layout.dart`)
   - **Pages**: Avoid using `_page.dart` - prefer `_screen.dart` for UI screens

# Model and Database Conventions
- Include createdAt, updatedAt, and isDeleted fields in Firestore documents
- Use @JsonSerializable(fieldRename: FieldRename.snake) for models
- Implement @JsonKey(includeFromJson: true, includeToJson: false) for read-only fields

# Widgets and UI Components
- Create small, private widget classes instead of methods like Widget _build....
- Implement RefreshIndicator for pull-to-refresh functionality
- In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction
- Always include an errorBuilder when using Image.network

# Security & Privacy
- **Data Encryption**: Encrypt sensitive financial data at rest
- **Biometric Auth**: Fingerprint/Face ID for app access
- **Privacy First**: Minimal data collection, local processing where possible
- **GDPR Compliance**: Clear data usage and deletion options

# Accessibility
- **Screen Reader Support**: Proper semantic labels for financial data
- **High Contrast**: Support for accessibility color schemes
- **Large Text**: Scalable typography for readability
- **Haptic Feedback**: Tactile responses for important actions

# Miscellaneous
- Use log instead of print for debugging
- Use BlocObserver for monitoring state transitions during debugging
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions
- Use @JsonValue(int) for enums that go to the database

# Code Generation
- Utilize build_runner for generating code from annotations (Freezed, JSON serialization)
- Run flutter pub run build_runner build --delete-conflicting-outputs after modifying annotated classes

# Documentation
- Document complex logic and non-obvious code decisions
- Follow official Flutter, Bloc, and Firebase documentation for best practices

Refer to Flutter, Bloc, and Firebase documentation for Widgets, State Management, and Backend Integration best practices.
